const User = require('../models/User.models');

// Create a new user
exports.createUser = async (req, res) => {
  try {
    const { name, phone, email } = req.body;  // Make sure you're reading the fields from req.body
    const photo = req.file?.path;  // The file path generated by Multer

    // If any required field is missing, return an error
    if (!name || !phone || !email) {
      return res.status(400).json({ message: 'All fields (name, phone, email) are required!' });
    }

    // Create the new user and save it to the database
    const newUser = new User({ name, phone, email, photo });
    await newUser.save();

    res.status(201).json({ message: 'User created successfully', user: newUser });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Error creating user', error });
  }
};


// Get all users
exports.getAllUsers = async (req, res) => {
  try {
    const users = await User.find();
    res.status(200).json(users);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Error fetching users', error });
  }
};

// Get a user by ID
exports.getUserById = async (req, res) => {
  const { id } = req.params;
  try {
    const user = await User.findById(id);
    if (!user) return res.status(404).json({ message: 'User not found' });
    res.status(200).json(user);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Error fetching user', error });
  }
};

// Update user details
// Update user details
exports.updateUser = async (req, res) => {
  const { id } = req.params;
  const { name, phone, email } = req.body;  // Get the updated data from the request body
  const photo = req.file?.path;  // Get the uploaded file path (if a new file is uploaded)

  try {
    // Check if the user exists
    const user = await User.findById(id);
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    // Update user with new data
    const updatedUser = await User.findByIdAndUpdate(
      id,
      { name, phone, email, photo: photo || user.photo },  // Only update the photo if it's provided, else keep the old one
      { new: true }  // Return the updated user
    );

    // Return updated user data
    res.status(200).json(updatedUser);

  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Error updating user', error });
  }
};

// Delete a user
exports.deleteUser = async (req, res) => {
  const { id } = req.params;
  try {
    const deletedUser = await User.findByIdAndDelete(id);
    if (!deletedUser) return res.status(404).json({ message: 'User not found' });
    res.status(200).json({ message: 'User deleted successfully' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Error deleting user', error });
  }
};
